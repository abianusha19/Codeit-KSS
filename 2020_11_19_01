1)	2-Sum Binary Tree

Given a binary search tree T, where each node contains a positive integer, and an integer K, you have to find whether or not there exist two different nodes A and B such that A.value + B.value = K.
Return 1 to denote that two such nodes exist. Return 0, otherwise.
Notes
●	Your solution should run in linear time and not take memory more than O(height of T).
●	Assume all values in BST are distinct.
Input 1: 

T :       10
         / \
        9   20

K = 19

Return: 1

Input 2: 

T:        10
         / \
        9   20

K = 40

Return: 0

--------------------------------------------------------------------------------------------------------------------------

Solution:
class node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None

def findpair(root,k):
    
    stack1=[]
    stack2=[]
    flag1=flag2=True
    finalflag=0
    curr1=curr2=root
    while(True):
        
        while(flag1):
            if curr1:
                stack1.append(curr1)
                curr1=curr1.left
            elif not(stack1):
                flag1=0
            else:
                curr1=stack1.pop()
                #print(curr1.data)
                val1=curr1.data
                curr1=curr1.right
                flag1=0
                
        while(flag2):
            if curr2:
                stack2.append(curr2)
                curr2=curr2.right
            elif not(stack2):
                flag2=0
            else:
                curr2=stack2.pop()
                val2=curr2.data
                #print(curr2.data)
                curr2=curr2.left
                flag2=0
        
        if val1+val2==k:
            finalflag=1
            break
        
        elif val1+val2 > k:
            flag1=False
            flag2=True
            
        elif val1+val2 < k:
            flag2=False
            flag1=True
        if val1>=val2:
            break
    
    if finalflag==0:
        print(0)
    else:
        print(1)

root=node(15)
root.left=node(10)
root.right=node(20)
root.left.left=node(8)
root.left.right=node(12)
root.right.left=node(16)
root.right.right=node(25)
k=33
findpair(root,k)
            
            
    
    
        
