Make the intervals non-overlapping by assigning them to two different processors
Given a list of intervals interval[] where each interval contains two integers L and R, the task is to assign intervals to two different processors such that there are no overlapping intervals for each processor. To assign the interval[i] to the first processor, print “F” and to assign it to the second processor, print “S”.
Note: If there is no possible solution print -1.
Example1:
Input: interval[] = {{360, 480}, {420, 540}, {600, 660}}
Output: S, F, S
Explanation:
The intervals assigned to processors are –
Intervals of First Processor {{420, 540}}
Intervals of Second Processor {{360, 480}, {600, 660}}
As there are no overlapping intervals for each processor, it will be a valid solution.
Example2:
Input: interval[] = {{99, 150}, {1, 100}, {100, 301}, {2, 5}, {150, 250}}
Output: S, F, F, S, S
Explanation:
The intervals assigned to processors are –
Intervals of First Processor {{1, 100}, {100, 301}}
Intervals of Second Processor {{99, 150}, {2, 5}, {150, 250}}
As there are no overlapping intervals for each processor, it will be a valid solution.

-------------------------------------------------------------------------------------------------------------------
Solution:

n=int(input())
process=[]
for x in range(n):
    process.append(list(map(int,input().split())))
    process[x].append(x)
process.sort()
#print(process)
result=["F"]*n
f=0
s=0
flag=0
for x in range(n):
    if f<=process[x][0]:
        result[process[x][2]]="F"
        f=process[x][1]
    elif s<=process[x][0]:
        result[process[x][2]]="S"
        s=process[x][1]
    else:
        print(-1)
        flag=1
        break
if flag==0:
    print(*result)
        
        
    
    
