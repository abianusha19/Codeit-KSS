Given an array A[] of n integers, the task is to find a subsequence of size k whose product is maximum among all possible k sized subsequences of the given array.

Constraints

1 <= n <= 10^5
1 <= k <= n
Examples:

Input : A[] = {1, 2, 0, 3}, 
          k = 2
Output : 6
Explanation : Subsequence containing elements
{2, 3} gives maximum product : 2*3 = 6

Input : A[] = {1, 2, -1, -3, -6, 4}, 
          k = 4
Output : 144
Explanation : Subsequence containing {2, -3, 
-6, 4} gives maximum product : 2*(-3)*(-6)*4 
= 144
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution:

arr=list(map(int,input().split()))
k=int(input())
maxi=max(arr)
prod=1
arr.sort()
if maxi<0 and k%2==1:
    i=0
    j=len(arr)-1
    while(i<k):
        prod*=arr[j]
        i+=1
        j-=1
    
elif maxi==0 and k%2==1:
    prod=0
else:
    i=0
    j=len(arr)-1
    if k%2==1:
        prod*=maxi
        k-=1
        j-=1
    k=k//2
    for x in range(k):
        left=arr[i] * arr[i+1]
        right= arr[j]*arr[j-1]
        if left>right:
            prod*=left
            i+=1
        else:
            prod*=right
            j-=2
print(prod)
        
